trigger:
  branches:
    include:
    - 'releases/*'

stages:
- stage: onPush
  condition: |
    and(
      not(startsWith(variables['Build.SourceBranch'], 'refs/heads/releases')),
      not(startsWith(variables['Build.SourceBranch'], 'refs/heads/main')),
      not(startsWith(variables['Build.SourceBranch'], 'refs/tags/v'))
    )
  jobs:
  - job: onPushJob
    pool:
      vmImage: 'ubuntu-18.04'
    steps:
    - script: env | sort
      displayName: 'Environment / Context'

    - task: UsePythonVersion@0
      displayName: 'Use Python 3.9'
      inputs:
        versionSpec: 3.9

    - checkout: self
      persistCredentials: true
      clean: true
      displayName: 'Checkout & Build.Reason: $(Build.Reason) & Build.SourceBranchName: $(BRANCH_NAME)'

    - script: |
        python -m pip install --upgrade pip
        pip install -r unit-requirements.txt
        pip install -e .
      displayName: 'Install dependencies'

    - script: |
        pytest tests/unit --junitxml=test-unit.xml
      displayName: 'Run Unit tests'

    - bash: |
        dbx deploy --deployment-file conf/deployment.yml --jobs=STAGING-telco-churn-sample-integration-test --files-only --environment=staging
      env:
        DATABRICKS_HOST: $(STAGING_DATABRICKS_HOST)
        DATABRICKS_TOKEN: $(STAGING_DATABRICKS_TOKEN)
      displayName: 'Deploy integration test to staging env'

    - script: |
        dbx launch --job=STAGING-telco-churn-sample-integration-test --as-run-submit --trace --environment=staging
      env:
        DATABRICKS_HOST: $(STAGING_DATABRICKS_HOST)
        DATABRICKS_TOKEN: $(STAGING_DATABRICKS_TOKEN)
      displayName: 'Launch integration test in staging env'

    - task: PublishTestResults@2
      condition: succeededOrFailed()
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '**/test-*.xml'
        failTaskOnFailedTests: true

- stage: onRelease
  condition: |
    or(
      startsWith(variables['Build.SourceBranch'], 'refs/heads/releases'),
      startsWith(variables['Build.SourceBranch'], 'refs/tags/v')
    )
  jobs:
  - job: onReleaseJob
    pool:
      vmImage: 'ubuntu-18.04'

    steps:
      - script: env | sort
        displayName: 'Environment / Context'

      - task: UsePythonVersion@0
        displayName: 'Use Python 3.7'
        inputs:
          versionSpec: 3.7

      - checkout: self
        persistCredentials: true
        clean: true
        displayName: 'Checkout & Build.Reason: $(Build.Reason) & Build.SourceBranchName: $(Build.SourceBranchName)'

      - script: |
          python -m pip install --upgrade pip
          pip install -r unit-requirements.txt
          pip install -e .
        displayName: 'Install dependencies'

      - script: |
          pytest tests/unit --junitxml=test-unit.xml
        displayName: 'Run Unit tests'

      - bash: |
          dbx deploy --deployment-file conf/deployment.yml --jobs=PROD-telco-churn-initial-model-train-register --environment=prod
        env:
          DATABRICKS_HOST: $(PROD_DATABRICKS_HOST)
          DATABRICKS_TOKEN: $(PROD_DATABRICKS_TOKEN)
        displayName: 'Deploy PROD-telco-churn-initial-model-train-register job [prod environment]'

      - bash: |
          dbx deploy --deployment-file conf/deployment.yml --jobs=PROD-telco-churn-model-train --environment=prod
        env:
          DATABRICKS_HOST: $(PROD_DATABRICKS_HOST)
          DATABRICKS_TOKEN: $(PROD_DATABRICKS_TOKEN)
        displayName: 'Deploy PROD-telco-churn-model-train job [prod environment]'

      - bash: |
          dbx deploy --deployment-file conf/deployment.yml --jobs=PROD-telco-churn-model-deployment --environment=prod
        env:
          DATABRICKS_HOST: $(PROD_DATABRICKS_HOST)
          DATABRICKS_TOKEN: $(PROD_DATABRICKS_TOKEN)
        displayName: 'Deploy PROD-telco-churn-model-deployment job [prod environment]'

      - bash: |
          dbx deploy --deployment-file conf/deployment.yml --jobs=PROD-telco-churn-model-inference-batch --environment=prod
        env:
          DATABRICKS_HOST: $(PROD_DATABRICKS_HOST)
          DATABRICKS_TOKEN: $(PROD_DATABRICKS_TOKEN)
        displayName: 'Deploy PROD-telco-churn-model-inference-batch job [prod environment]'

      - task: PublishTestResults@2
        condition: succeededOrFailed()
        inputs:
          testResultsFormat: 'JUnit'
          testResultsFiles: '**/test-*.xml'
          failTaskOnFailedTests: true